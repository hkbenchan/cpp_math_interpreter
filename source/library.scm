(define > (lambda (x y) (< y x)))
(define >= (lambda (x y) (not (< x y))))
(define <= (lambda (x y) (not (< y x))))
(define = (lambda (x y) (if (< x y) 0 (not (< y x)))))
(define abs (lambda (x) (if (< x 0) (- 0 x) x)))
(define factorial (lambda (x) (if (< x 2) 1 (* x (factorial (- x 1))))))
(define for-each (lambda (x y) (if (not (nullp y)) (x (car y))) (if (not (nullp y)) (for-each x (cdr y)))))
(define inc (lambda (x) (+ x 1)))
(define dec (lambda (x) (- x 1)))
(define inverse (lambda (x) (/ x)))
(define int2double (lambda (x) (+ x 0.0)))
(define mod (lambda (mod_x mod_y) (define q (/ mod_x mod_y)) (- mod_x (* q mod_y))))
(define even (lambda (x) (define remain (mod x 2)) (if (= remain 1) 0 1)))
(define odd (lambda (x) (even (- x 1))))
(define square (lambda (x) (* x x)))
(define expn (lambda (x y) (define half (/ y 2)) (if (< y 2) (if (= y 0) 1 x) (* (if (even y) 1 x) (square (expn x half))))))
(define fibbo (lambda (x) (if (<= x 1) 1 (+ (fibbo (- x 1)) (fibbo (- x 2))))))
(define gcd (lambda (gcd_n gcd_m) (if (= gcd_m 0) gcd_n (gcd gcd_m (mod gcd_n gcd_m)))))
(define list-tail (lambda (list k) (if (> k 0) (list-tail (cdr list) (- k 1)) list)))
(define list-ref (lambda (list k) (if (= k 0) (car list) (list-ref (cdr list) (- k 1)))))
(define cadr (lambda (x) (car (cdr x)) ))
(define cddr (lambda (x) (cdr (cdr x)) ))
(define lcd (lambda (x y) (define d (gcd x y)) (* (/ x d) (/ y d) d)))
(define and (lambda (x y) (if (not (eval x)) 0 (if (not (eval y)) 0 1))))
(define or (lambda (x y) (if (not (eval x)) (if (not (eval y)) 0 1) 1)))